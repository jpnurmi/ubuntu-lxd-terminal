// Mocks generated by Mockito 5.2.0 from annotations
// in lxd_store/test/instance_store_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i15;
import 'dart:io' as _i3;

import 'package:lxd/src/api/certificate.dart' as _i5;
import 'package:lxd/src/api/image.dart' as _i6;
import 'package:lxd/src/api/instance.dart' as _i7;
import 'package:lxd/src/api/instance_state.dart' as _i8;
import 'package:lxd/src/api/network.dart' as _i9;
import 'package:lxd/src/api/network_acl.dart' as _i10;
import 'package:lxd/src/api/operation.dart' as _i2;
import 'package:lxd/src/api/profile.dart' as _i11;
import 'package:lxd/src/api/project.dart' as _i12;
import 'package:lxd/src/api/resource.dart' as _i4;
import 'package:lxd/src/api/storage_pool.dart' as _i13;
import 'package:lxd/src/event.dart' as _i16;
import 'package:lxd/src/lxd_client.dart' as _i14;
import 'package:lxd/src/remote_image.dart' as _i17;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLxdOperation_0 extends _i1.Fake implements _i2.LxdOperation {}

class _FakeWebSocket_1 extends _i1.Fake implements _i3.WebSocket {}

class _FakeLxdResources_2 extends _i1.Fake implements _i4.LxdResources {}

class _FakeLxdCertificate_3 extends _i1.Fake implements _i5.LxdCertificate {}

class _FakeLxdImage_4 extends _i1.Fake implements _i6.LxdImage {}

class _FakeLxdInstance_5 extends _i1.Fake implements _i7.LxdInstance {}

class _FakeLxdInstanceState_6 extends _i1.Fake implements _i8.LxdInstanceState {
}

class _FakeLxdNetwork_7 extends _i1.Fake implements _i9.LxdNetwork {}

class _FakeLxdNetworkState_8 extends _i1.Fake implements _i9.LxdNetworkState {}

class _FakeLxdNetworkAcl_9 extends _i1.Fake implements _i10.LxdNetworkAcl {}

class _FakeLxdProfile_10 extends _i1.Fake implements _i11.LxdProfile {}

class _FakeLxdProject_11 extends _i1.Fake implements _i12.LxdProject {}

class _FakeLxdStoragePool_12 extends _i1.Fake implements _i13.LxdStoragePool {}

/// A class which mocks [LxdClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockLxdClient extends _i1.Mock implements _i14.LxdClient {
  MockLxdClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set userAgent(String? value) =>
      super.noSuchMethod(Invocation.setter(#userAgent, value),
          returnValueForMissingStub: null);
  @override
  _i15.Future<Map<String, List<String>>> getOperations() => (super.noSuchMethod(
          Invocation.method(#getOperations, []),
          returnValue:
              Future<Map<String, List<String>>>.value(<String, List<String>>{}))
      as _i15.Future<Map<String, List<String>>>);
  @override
  _i15.Future<_i2.LxdOperation> getOperation(String? id) => (super.noSuchMethod(
          Invocation.method(#getOperation, [id]),
          returnValue: Future<_i2.LxdOperation>.value(_FakeLxdOperation_0()))
      as _i15.Future<_i2.LxdOperation>);
  @override
  _i15.Future<_i3.WebSocket> getOperationWebSocket(
          String? id, String? secret) =>
      (super.noSuchMethod(
              Invocation.method(#getOperationWebSocket, [id, secret]),
              returnValue: Future<_i3.WebSocket>.value(_FakeWebSocket_1()))
          as _i15.Future<_i3.WebSocket>);
  @override
  _i15.Future<_i2.LxdOperation> waitOperation(String? id) =>
      (super.noSuchMethod(Invocation.method(#waitOperation, [id]),
              returnValue:
                  Future<_i2.LxdOperation>.value(_FakeLxdOperation_0()))
          as _i15.Future<_i2.LxdOperation>);
  @override
  _i15.Future<void> cancelOperation(String? id) => (super.noSuchMethod(
      Invocation.method(#cancelOperation, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i15.Future<void>);
  @override
  _i15.Future<_i4.LxdResources> getResources() => (super.noSuchMethod(
          Invocation.method(#getResources, []),
          returnValue: Future<_i4.LxdResources>.value(_FakeLxdResources_2()))
      as _i15.Future<_i4.LxdResources>);
  @override
  _i15.Future<List<String>> getCertificates() =>
      (super.noSuchMethod(Invocation.method(#getCertificates, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i15.Future<List<String>>);
  @override
  _i15.Future<_i5.LxdCertificate> getCertificate(String? fingerprint) =>
      (super.noSuchMethod(Invocation.method(#getCertificate, [fingerprint]),
              returnValue:
                  Future<_i5.LxdCertificate>.value(_FakeLxdCertificate_3()))
          as _i15.Future<_i5.LxdCertificate>);
  @override
  _i15.Stream<_i16.LxdEvent> getEvents(
          {String? project = r'', Set<_i16.LxdEventType>? types = const {}}) =>
      (super.noSuchMethod(
          Invocation.method(#getEvents, [], {#project: project, #types: types}),
          returnValue:
              Stream<_i16.LxdEvent>.empty()) as _i15.Stream<_i16.LxdEvent>);
  @override
  _i15.Future<List<String>> getImages({String? project, String? filter}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getImages, [], {#project: project, #filter: filter}),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i15.Future<List<String>>);
  @override
  _i15.Future<_i6.LxdImage> getImage(String? fingerprint) =>
      (super.noSuchMethod(Invocation.method(#getImage, [fingerprint]),
              returnValue: Future<_i6.LxdImage>.value(_FakeLxdImage_4()))
          as _i15.Future<_i6.LxdImage>);
  @override
  _i15.Future<List<_i17.LxdRemoteImage>> getRemoteImages(String? url) =>
      (super.noSuchMethod(Invocation.method(#getRemoteImages, [url]),
              returnValue: Future<List<_i17.LxdRemoteImage>>.value(
                  <_i17.LxdRemoteImage>[]))
          as _i15.Future<List<_i17.LxdRemoteImage>>);
  @override
  _i15.Future<_i17.LxdRemoteImage?> findRemoteImage(
          String? url, String? name) =>
      (super.noSuchMethod(Invocation.method(#findRemoteImage, [url, name]),
              returnValue: Future<_i17.LxdRemoteImage?>.value())
          as _i15.Future<_i17.LxdRemoteImage?>);
  @override
  _i15.Future<List<String>> getInstances() =>
      (super.noSuchMethod(Invocation.method(#getInstances, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i15.Future<List<String>>);
  @override
  _i15.Future<_i7.LxdInstance> getInstance(String? name) =>
      (super.noSuchMethod(Invocation.method(#getInstance, [name]),
              returnValue: Future<_i7.LxdInstance>.value(_FakeLxdInstance_5()))
          as _i15.Future<_i7.LxdInstance>);
  @override
  _i15.Future<_i8.LxdInstanceState> getInstanceState(String? name) =>
      (super.noSuchMethod(Invocation.method(#getInstanceState, [name]),
              returnValue:
                  Future<_i8.LxdInstanceState>.value(_FakeLxdInstanceState_6()))
          as _i15.Future<_i8.LxdInstanceState>);
  @override
  _i15.Future<_i2.LxdOperation> createInstance(
          {String? architecture,
          String? description,
          String? name,
          _i17.LxdRemoteImage? image}) =>
      (super.noSuchMethod(
              Invocation.method(#createInstance, [], {
                #architecture: architecture,
                #description: description,
                #name: name,
                #image: image
              }),
              returnValue:
                  Future<_i2.LxdOperation>.value(_FakeLxdOperation_0()))
          as _i15.Future<_i2.LxdOperation>);
  @override
  _i15.Future<_i2.LxdOperation> startInstance(String? name,
          {bool? force = false}) =>
      (super.noSuchMethod(
              Invocation.method(#startInstance, [name], {#force: force}),
              returnValue:
                  Future<_i2.LxdOperation>.value(_FakeLxdOperation_0()))
          as _i15.Future<_i2.LxdOperation>);
  @override
  _i15.Future<_i2.LxdOperation> execInstance(String? name,
          {List<String>? command,
          String? workingDirectory,
          Map<String, String>? environment,
          int? user,
          int? group,
          bool? interactive,
          bool? recordOutput,
          int? width,
          int? height,
          bool? waitForWebSocket}) =>
      (super.noSuchMethod(
              Invocation.method(#execInstance, [
                name
              ], {
                #command: command,
                #workingDirectory: workingDirectory,
                #environment: environment,
                #user: user,
                #group: group,
                #interactive: interactive,
                #recordOutput: recordOutput,
                #width: width,
                #height: height,
                #waitForWebSocket: waitForWebSocket
              }),
              returnValue:
                  Future<_i2.LxdOperation>.value(_FakeLxdOperation_0()))
          as _i15.Future<_i2.LxdOperation>);
  @override
  _i15.Future<_i2.LxdOperation> stopInstance(String? name,
          {bool? force = false}) =>
      (super.noSuchMethod(
              Invocation.method(#stopInstance, [name], {#force: force}),
              returnValue:
                  Future<_i2.LxdOperation>.value(_FakeLxdOperation_0()))
          as _i15.Future<_i2.LxdOperation>);
  @override
  _i15.Future<_i2.LxdOperation> restartInstance(String? name,
          {bool? force = false}) =>
      (super.noSuchMethod(
              Invocation.method(#restartInstance, [name], {#force: force}),
              returnValue:
                  Future<_i2.LxdOperation>.value(_FakeLxdOperation_0()))
          as _i15.Future<_i2.LxdOperation>);
  @override
  _i15.Future<_i2.LxdOperation> deleteInstance(String? name) =>
      (super.noSuchMethod(Invocation.method(#deleteInstance, [name]),
              returnValue:
                  Future<_i2.LxdOperation>.value(_FakeLxdOperation_0()))
          as _i15.Future<_i2.LxdOperation>);
  @override
  _i15.Future<List<String>> getNetworks() =>
      (super.noSuchMethod(Invocation.method(#getNetworks, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i15.Future<List<String>>);
  @override
  _i15.Future<_i9.LxdNetwork> getNetwork(String? name) =>
      (super.noSuchMethod(Invocation.method(#getNetwork, [name]),
              returnValue: Future<_i9.LxdNetwork>.value(_FakeLxdNetwork_7()))
          as _i15.Future<_i9.LxdNetwork>);
  @override
  _i15.Future<List<_i9.LxdNetworkLease>> getNetworkLeases(String? name) =>
      (super.noSuchMethod(Invocation.method(#getNetworkLeases, [name]),
              returnValue: Future<List<_i9.LxdNetworkLease>>.value(
                  <_i9.LxdNetworkLease>[]))
          as _i15.Future<List<_i9.LxdNetworkLease>>);
  @override
  _i15.Future<_i9.LxdNetworkState> getNetworkState(String? name) =>
      (super.noSuchMethod(Invocation.method(#getNetworkState, [name]),
              returnValue:
                  Future<_i9.LxdNetworkState>.value(_FakeLxdNetworkState_8()))
          as _i15.Future<_i9.LxdNetworkState>);
  @override
  _i15.Future<List<String>> getNetworkAcls() =>
      (super.noSuchMethod(Invocation.method(#getNetworkAcls, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i15.Future<List<String>>);
  @override
  _i15.Future<_i10.LxdNetworkAcl> getNetworkAcl(String? name) =>
      (super.noSuchMethod(Invocation.method(#getNetworkAcl, [name]),
              returnValue:
                  Future<_i10.LxdNetworkAcl>.value(_FakeLxdNetworkAcl_9()))
          as _i15.Future<_i10.LxdNetworkAcl>);
  @override
  _i15.Future<List<String>> getProfiles() =>
      (super.noSuchMethod(Invocation.method(#getProfiles, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i15.Future<List<String>>);
  @override
  _i15.Future<_i11.LxdProfile> getProfile(String? name) =>
      (super.noSuchMethod(Invocation.method(#getProfile, [name]),
              returnValue: Future<_i11.LxdProfile>.value(_FakeLxdProfile_10()))
          as _i15.Future<_i11.LxdProfile>);
  @override
  _i15.Future<List<String>> getProjects() =>
      (super.noSuchMethod(Invocation.method(#getProjects, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i15.Future<List<String>>);
  @override
  _i15.Future<_i12.LxdProject> getProject(String? name) =>
      (super.noSuchMethod(Invocation.method(#getProject, [name]),
              returnValue: Future<_i12.LxdProject>.value(_FakeLxdProject_11()))
          as _i15.Future<_i12.LxdProject>);
  @override
  _i15.Future<List<String>> getStoragePools() =>
      (super.noSuchMethod(Invocation.method(#getStoragePools, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i15.Future<List<String>>);
  @override
  _i15.Future<_i13.LxdStoragePool> getStoragePool(String? name) =>
      (super.noSuchMethod(Invocation.method(#getStoragePool, [name]),
              returnValue:
                  Future<_i13.LxdStoragePool>.value(_FakeLxdStoragePool_12()))
          as _i15.Future<_i13.LxdStoragePool>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
